//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: grpc.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Glow_GlowTestPointReceivingCall: ClientCallUnary {}

fileprivate final class Glow_GlowTestPointReceivingCallBase: ClientCallUnaryBase<Glow_PointRequest, Glow_GlowReply>, Glow_GlowTestPointReceivingCall {
  override class var method: String { return "/glow.Glow/TestPointReceiving" }
}

internal protocol Glow_GlowLotsOfPointsCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Glow_PointRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Glow_PointRequest, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> Glow_GlowReply
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<Glow_GlowReply>) -> Void) throws
}

internal extension Glow_GlowLotsOfPointsCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Glow_PointRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Glow_GlowLotsOfPointsCallBase: ClientCallClientStreamingBase<Glow_PointRequest, Glow_GlowReply>, Glow_GlowLotsOfPointsCall {
  override class var method: String { return "/glow.Glow/LotsOfPoints" }
}

internal protocol Glow_GlowDrawTimeCall: ClientCallUnary {}

fileprivate final class Glow_GlowDrawTimeCallBase: ClientCallUnaryBase<Glow_PointRequest, Glow_GlowReply>, Glow_GlowDrawTimeCall {
  override class var method: String { return "/glow.Glow/DrawTime" }
}


/// Instantiate Glow_GlowServiceClient, then call methods of this protocol to make API calls.
internal protocol Glow_GlowService: ServiceClient {
  /// Synchronous. Unary.
  func testPointReceiving(_ request: Glow_PointRequest) throws -> Glow_GlowReply
  /// Asynchronous. Unary.
  func testPointReceiving(_ request: Glow_PointRequest, completion: @escaping (Glow_GlowReply?, CallResult) -> Void) throws -> Glow_GlowTestPointReceivingCall

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func lotsOfPoints(completion: ((CallResult) -> Void)?) throws -> Glow_GlowLotsOfPointsCall

  /// Synchronous. Unary.
  func drawTime(_ request: Glow_PointRequest) throws -> Glow_GlowReply
  /// Asynchronous. Unary.
  func drawTime(_ request: Glow_PointRequest, completion: @escaping (Glow_GlowReply?, CallResult) -> Void) throws -> Glow_GlowDrawTimeCall

}

internal final class Glow_GlowServiceClient: ServiceClientBase, Glow_GlowService {
  /// Synchronous. Unary.
  internal func testPointReceiving(_ request: Glow_PointRequest) throws -> Glow_GlowReply {
    return try Glow_GlowTestPointReceivingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func testPointReceiving(_ request: Glow_PointRequest, completion: @escaping (Glow_GlowReply?, CallResult) -> Void) throws -> Glow_GlowTestPointReceivingCall {
    return try Glow_GlowTestPointReceivingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  internal func lotsOfPoints(completion: ((CallResult) -> Void)?) throws -> Glow_GlowLotsOfPointsCall {
    return try Glow_GlowLotsOfPointsCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func drawTime(_ request: Glow_PointRequest) throws -> Glow_GlowReply {
    return try Glow_GlowDrawTimeCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func drawTime(_ request: Glow_PointRequest, completion: @escaping (Glow_GlowReply?, CallResult) -> Void) throws -> Glow_GlowDrawTimeCall {
    return try Glow_GlowDrawTimeCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

